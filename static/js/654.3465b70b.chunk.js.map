{"version":3,"file":"static/js/654.3465b70b.chunk.js","mappings":"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","sources":["components/Contact/contact.styled.js","components/Contact/contact.jsx","components/ContactList/сontactList.styled.js","redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactList/сontactList.jsx","components/ContactForm/contactForm.styled.js","components/ContactForm/contactForm.jsx","pages/ContactsPages/ContactsPages.styled.js","pages/ContactsPages/ContactsPages.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactContainer = styled.li`\n  display: flex;\n  align-items: flex-end;\n  font-weight: bold;\n  gap: 40px;\n  margin-top: -116px;\n`;\n\nexport const ContactName = styled.div`\n  display: flex;\n  margin-top: 20px;\n  margin-bottom: 10px;\n  font-size: 20px;\n`;\n\nexport const ButtonDelete = styled.button`\n  width: 65px;\n  height: 30px;\n  margin-bottom: 5px;\n  border-radius: 60px;\n  border: none;\n  cursor: pointer;\n  background-color: white;\n  box-shadow: 3px 5px 20px rgba(0, 5, 0, 0.1);\n\n  &:hover {\n    background-color: yellowgreen;\n    color: black;\n    border: 2px solid white;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","import { ContactContainer, ContactName, ButtonDelete } from './contact.styled';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contacts/operations';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ContactContainer>\n      <ContactName key={id}>\n        {name}: {number}\n      </ContactName>\n      <ButtonDelete type=\"button\" onClick={() => dispatch(deleteContacts(id))}>\n        Delete\n      </ButtonDelete>\n    </ContactContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactListStyled = styled.ul`\n  display: flex;\n  flex-direction: column;\n`;\n","export const selectFilter = state => state.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectContacts = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Contact } from 'components/Contact/contact';\nimport { ContactListStyled } from './сontactList.styled';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { useSelector } from 'react-redux';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filterContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <ContactListStyled>\n      {filterContacts().map(({ name, number, id }) => {\n        return <Contact key={id} id={id} name={name} number={number} />;\n      })}\n    </ContactListStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ButtonAddContact = styled.button`\n  background-color: yellowgreen;\n  color: black;\n  border: none;\n  border-radius: 43px;\n  min-height: 30px;\n  width: 80px;\n  height: 73px;\n  margin-left: 645px;\n  margin-top: 151px;\n  margin-bottom: -18px;\n  &:hover {\n    transform: scale(0.8);\n    transition: transform 450ms cubic-bezier(0.4, 0, 0.2, 1);\n    background-color: white;\n    cursor: pointer;\n  }\n\n  input {\n    width: 162px;\n  }\n`;\n\nexport const LabelStyled = styled.label`\n  padding-left: 14px;\n  padding-right: 10px;\n  margin-bottom: 12px;\n  font-size: 16px;\n  font-weight: bold;\n  color: white;\n`;\n\nexport const ContContacts = styled.div`\n  margin-top: -184px;\n  margin-left: 483px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContacts } from 'redux/contacts/operations';\nimport {\n  ButtonAddContact,\n  LabelStyled,\n  ContContacts,\n} from './contactForm.styled';\nimport toast from 'react-hot-toast';\n\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\n// solution 2 with library Formic\n/*======== FORMIK =======*/\nconst PhoneBookSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(1, 'The name is too short!')\n    .max(25, 'The name is too long!')\n    .required('Name is required!'),\n  number: Yup.string()\n    .min(2, 'The number is too short!')\n    .max(20, 'The number is too long!')\n    .required('Phone number is required!'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={PhoneBookSchema}\n      onSubmit={(values, actions) => {\n        actions.resetForm();\n        if (\n          !contacts.find(\n            contact => contact.name.toLowerCase() === values.name.toLowerCase()\n          )\n        ) {\n          dispatch(addContacts(values));\n        } else {\n          toast.success(`${values.name} added to the phonebook`);\n        }\n      }}\n    >\n      {() => (\n        <Form>\n          <ContContacts>\n            <LabelStyled htmlFor=\"name\">Contacts</LabelStyled>\n            <Field name=\"name\" type=\"text\" placeholder=\"Enter name...\" />\n\n            <LabelStyled htmlFor=\"number\">Phone</LabelStyled>\n            <Field name=\"number\" type=\"text\" placeholder=\"Enter number...\" />\n          </ContContacts>\n\n          <ButtonAddContact type=\"submit\">Add contact</ButtonAddContact>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\n// //solution 2\n\n// //   /*======== GENERATION ID =======*/\n// const nameInputId = nanoid();\n// const numberInputId = nanoid();\n\n// //   /*======== ADD FORM =======*/\n// export const ContactForm = () => {\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectContacts);\n\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   //   /*======== PROCESSING FORM =======*/\n//   const handleSubmit = evt => {\n//     evt.preventDefault();\n\n//     //   /*======== IF THE CONTACT ALREADY EXISTS, A MESSAGE IS DISPLAYED  =======*/\n//     const contactsExist = contacts.some(\n//       contact => contact.name.toLowerCase() === name.toLowerCase()\n//     );\n\n//     if (contactsExist) {\n//       toast.info(`${name} added to the phonebook`);\n//       return;\n//     }\n\n//     dispatch(addContacts({ name, number }));\n//     setName('');\n//     setNumber('');\n//   };\n\n//   const handleChange = event => {\n//     const { name, value } = event.currentTarget;\n\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'number':\n//         setNumber(value);\n//         break;\n//       default:\n//         return;\n//     }\n//   };\n\n//   return (\n//     <FormRegister onSubmit={handleSubmit}>\n//       <LabelName htmlFor={nameInputId}>\n//         Name\n//         <InputRegister\n//           type=\"text\"\n//           name=\"text\"\n//           value={name}\n//           onChange={handleChange}\n//           placeholder=\"Enter contacts...\"\n//         />\n//       </LabelName>\n\n//       <LabelName htmlFor={numberInputId}>\n//         Phone\n//         <InputRegister\n//           type=\"text\"\n//           name=\"name\"\n//           value={number}\n//           onChange={handleChange}\n//           placeholder=\"Enter numbers...\"\n//         />\n//       </LabelName>\n//       <Button type=\"submit\">Add contact</Button>\n//     </FormRegister>\n//   );\n// };\n","import styled from 'styled-components';\n\nexport const Message = styled.div`\n  color: black;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/сontactList';\nimport { ContactForm } from 'components/ContactForm/contactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Message } from './ContactsPages.styled';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Message>{isLoading && 'Request in progress...'}</Message>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["ContactContainer","styled","_templateObject","_taggedTemplateLiteral","ContactName","_templateObject2","ButtonDelete","_templateObject3","Contact","_ref","id","name","number","dispatch","useDispatch","_jsxs","children","_jsx","type","onClick","deleteContacts","ContactListStyled","selectFilter","state","filter","selectIsLoading","contacts","isLoading","selectContacts","items","ContactList","createSelector","contact","toLowerCase","includes","useSelector","map","ButtonAddContact","LabelStyled","ContContacts","PhoneBookSchema","Yup","shape","min","max","required","ContactForm","Formik","initialValues","validationSchema","onSubmit","values","actions","resetForm","find","toast","concat","addContacts","Form","htmlFor","Field","placeholder","Message","Tasks","useEffect","fetchContacts","_Fragment","Helmet"],"sourceRoot":""}